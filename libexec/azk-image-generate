#!/usr/bin/env azk-interpreter
#
# Summary: Performs the provisioning of specified image type
#
# Usage: azk image-generate <script-path> <tag>

# Require agent
[ "$1" == "--final" ] && {
  final=true; shift
}

[ -z "$2" ] && {
  path=`pwd`; tag="$1"
} || {
  path="$1"; tag="$2"
}

# requires azkfile
cd $path; export AZK_DIR=$path

# requires parameter
[ -z "$tag" ] && {
  tag=`azk-app info | jq -r ".image"`
}

if [ -z "$final" ]; then
  exec azk-agent-exec $azk_command $tag
fi

azkfile=`azk-azkfile --no-loop`

meta() {
  local var="$1"; shift
  if [[ "$var" == "-a" ]]; then
    local var="$1"; shift
    eval "$var=($(cat $azkfile | jq -c -r "$@ | @sh"))"
  else
    eval "$var='$(cat $azkfile | jq -c -r "$@")'"
  fi
}

# Build Dockerfile
declare -a dockerfile

# Box based
meta from ".box"
azk.info "Check for box $from"
{ image=`azk-image-provision $from 2>&3`; } 3>&2

dockerfile+=("FROM $image")

meta -a build_steps ".build // []"
for step in "${build_steps[@]}"; do
  if [[ "${step}" =~ ^#.* ]]; then
    dockerfile+=("RUN echo '$step' \$'\n'")
  else
    dockerfile+=("RUN ${step}")
  fi
done

# Force unique image
dockerfile+=("RUN echo '$tag' > /etc/azk_image")

printf "%s\n" "${dockerfile[@]}" > ./Dockerfile

# Run docker build and tag image
docker build -q -rm -t $tag .
