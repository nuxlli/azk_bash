#!/usr/bin/env azk-interpreter
#
# Summary: Management and return information about the boxes
#
# Usage: azk box command <box>

[ -z "$1" ] && show_usage $azk_command

box_info() {
  box="$1"

  path_regex="(\.\./|\./|/).*"
  github_regex="[[:alnum:]-]+/[[:alnum:]-]+(#.+)?"
  docker_regex="[[:alnum:]|\.|_|/|\:|-]+"

  # Github?
  if [[ "$box" =~ ^$github_regex$ ]]; then
    info_type="github"
    info_path="$(expr "$box" : '\([[:alnum:]|/|-]*\).*')"
    info_repo="https://github.com/${info_path}"

    info_vers="$(expr "$box" : '[[:alnum:]|/|-]*#\(.*\)')"
    info_vers="${info_vers:-master}"
    info_image="$info_path:$info_vers"

  # Path?
  elif [[ "$box" =~ ^$path_regex$ ]]; then
    if [ ! -d "$box" ]; then
      azk.error "box path '$box' not found"
      exit 1;
    fi

    box="$(cd $box; pwd)"
    info_type="path"
    info_path="$box"
    info_vers="$(tar c $box 2>/dev/null | azk.hash)"
    info_image="${info_path#/}:$info_vers"

  # Docker image
  elif [[ "$box" =~ ^$docker_regex$ ]]; then
    info_type="docker"
    info_vers="$(expr "$box" : '.*:\(.*\)')"
    info_image="$box"
  fi

  str_or_null() {
    [ -z "$1" ] && echo "null" || \
      echo "\"$1\""
  }

  # Unsupported
  if [ -z "$info_type" ]; then
    azk.error "'$box' is not a valid definition of box"
    exit 1
  else
    # Return
    echo "{
      \"type\": $(str_or_null $info_type),
      \"repository\": $(str_or_null $info_repo),
      \"clone_path\": $(str_or_null $info_path),
      \"version\": $(str_or_null $info_vers),
      \"image\": $(str_or_null $info_image)
    }"
  fi
}

azk.run_internal "$@"
