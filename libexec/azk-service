#!/usr/bin/env bash
#
# Summary: Manage services related to current application
#
# Usage: azk service <command> [arg1..arg2..argN]

set -e
[ -n "$AZK_DEBUG" ] && set -x

# Provide azk completions
if [ "$1" = "--complete" ]; then
  exit
fi

# Save --final flag
if [ "$1" = "--final" ]; then
  final=true; shift
fi

# requires azkfile
azkfile=`azk-azkfile`

# run only is --final flag
if [ -z "$final" ]; then
  exec azk-agent-exec service "$@"
fi

# Tools
source "$(azk-root)/private/bin/common.sh"

# Jq filters
qry_default='to_entries | map(select(.value.default == true)) | .[0].key // ""'
qry_to_kill='.[0:%s] | to_entries | ["\(.[].value.Id) \(.[].value.Ports[0].PublicPort)"] | @sh'
qry_proc_name='. | map(select(.Names[0] | contains("/service:%s:")))'
qry_alias='.envs.%s.alias | @sh'

not_services() {
  azk.error "[service] services not defined"
  exit 1
}

balancer.add() {
  azk.redis rpush "$1" "$2" >/dev/null
}

balancer.init() {
  if [ -z "$(azk.redis lrange $1 0 0)" ]; then
    balancer.add $1 $2
  fi
}

balancer.remove() {
  azk.redis lrem "$1" 0 "$2" >/dev/null
}

# TODO: Separar isso em um outro processo

process_command() {
  local command="$1"; shift
  local service="$1"; shift
  local cmd=$(echo $services | jq -r ".${service}.command")

  if [ "$cmd" = "null" ]; then
    azk.error "[service] service '$service' not defined"
    exit 1
  fi

  # Filter containers by service
  local query="$(printf "$qry_proc_name" "$service")"
  local containers="$(echo $containers | jq -r $query)"
  local actual=$(echo $containers | jq '. | length')

  local number=1
  if [[ ( "$1" == "-n" ) && ( ! -z "$2" ) ]]; then
    number=$2
  fi

  if [ ! "$actual" -eq "$number" ]; then
    [ "$number" -lt 0 ] && number=0
    azk.info "[service] scale to ${actual} to ${number} instances"

    local app_id="$(cat $azkfile | jq -r ".id")"
    local query="$(printf "$qry_alias" "$AZK_ENV")"
    eval "local alias=($(cat $azkfile | jq -r "$query"))"

    for a in "${alias[@]}"; do
      balancer.init "frontend:${a}" "$app_id"
    done

    if [ "$actual" -gt "$number" ]; then
      local query=$(printf "$qry_to_kill" $(( $actual - $number )))
      eval "local to_kill=($(echo "$containers" | jq -r "$query"))"
      echo -ne $(azk.escape "Kill: %{red}")
      for to in "${to_kill[@]}"; do
        read -r dci port <<< "$to"

        # Remove from balancer
        for a in "${alias[@]}"; do
          balancer.remove "frontend:${a}" "http://192.168.50.4:$port"
        done

        # kill
        docker kill $dci > /dev/null
        echo -en "-"
      done
    else
      local image=$(azk-provision --get-name app)
      local port="8080"
      cmd="/bin/bash -c '$cmd &> /app/log/${service}.log'"
      cmd="docker run -d -e AZK_ID="%s" -e PORT="${port}" -w=/app -p 8080 -name="%s" -v=`pwd`:/app $image $cmd"

      # Provision image
      azk-provision app

      echo -ne $(azk.escape "Up: %{green}")
      for i in $(seq 1 $(( $number - $actual ))); do
        container_name="/service:$service:$(azk.uuid 15)"
        container_cid="$(eval "$(printf "${cmd}" "$container_name" "$container_name")")"

        if [ -z "$container_cid" ]; then
          azk.error "[service] fail to up service"
          exit 1;
        fi

        # Balancer
        container_port=$(docker port "$container_name" $port | awk -F : '{print $2}')
        for a in "${alias[@]}"; do
          balancer.add "frontend:${a}" "http://192.168.50.4:$container_port"
        done

        echo -en "+"
      done

      echo ""
      azk.info "%{reset}[service] Access:$(printf ' http://%s' "${alias[@]}")"
    fi

    azk.escape "%{reset}"
  fi
}

# Command
service_command="$1"; shift
case $service_command in
  start|scale|status)
    # Services data
    services=$(cat $azkfile | jq -r '.services')

    [ "$services" = "null" ] && not_services

    # Default services
    service=$(echo $services | jq -r "${qry_default}")
    service="${service:-:all:}"

    # Service passed
    if [[ ( ! -z "$1" ) && ( ! "$1" =~ ^--?[a-zA-Z0-9]{1,}$ ) ]]; then
      service="$1"
      shift
    fi

    # Get containers in execution for this app
    containers="$(azk.docker_containers)"

    # all services
    if [ "$service" = ":all:" ]; then
      azk.error "[service] :all: not supported yet"
    else
      process_command "$service_command" "$service" "$@"
    fi
    ;;
  *)
    [ ! -z "$service_command" ] && azk.error "'$service_command' unsupported command"
    azk-help --usage exec >&2
    exit 1;
esac
